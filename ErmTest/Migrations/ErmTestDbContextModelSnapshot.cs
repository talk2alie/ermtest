// <auto-generated />
using ErmTest.DbContexts;
using ErmTest.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Microsoft.EntityFrameworkCore.ValueGeneration;
using System;

namespace ErmTest.Migrations
{
    [DbContext(typeof(ErmTestDbContext))]
    partial class ErmTestDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ErmTest.Models.Entities.AcademicYear", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.ToTable("AcademicYears");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AddressLine");

                    b.Property<string>("City");

                    b.Property<string>("County");

                    b.HasKey("Id");

                    b.ToTable("Addresses");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Assessment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AssignmentDate");

                    b.Property<int>("ClassId");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<DateTime>("DueDate");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.ToTable("Assessments");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Assessment");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Attendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("Note");

                    b.Property<int>("PersonId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("PersonId");

                    b.ToTable("AttendanceRecords");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Class", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Days");

                    b.Property<int>("FacultyId");

                    b.Property<int>("PeriodId");

                    b.Property<int>("SectionId");

                    b.Property<int>("SubjectId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("PeriodId");

                    b.HasIndex("SectionId");

                    b.HasIndex("SubjectId");

                    b.ToTable("Classes");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.ClassTextBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClassId");

                    b.Property<int>("TextBookId");

                    b.HasKey("Id");

                    b.HasIndex("ClassId");

                    b.HasIndex("TextBookId");

                    b.ToTable("ClassTextBooks");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Complaint", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DefendantId");

                    b.Property<string>("Detail");

                    b.Property<int>("PlaintiffId");

                    b.Property<DateTime>("SubmisssionDate");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("DefendantId");

                    b.HasIndex("PlaintiffId");

                    b.ToTable("Complaints");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Detail");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.County", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EducationOfficerFullName");

                    b.Property<string>("Name");

                    b.Property<string>("OfficeAddress");

                    b.Property<string>("OfficeCity");

                    b.Property<string>("PrimaryEmailAddress");

                    b.Property<string>("PrimaryPhoneNumber");

                    b.Property<string>("SecondaryEmailAddress");

                    b.Property<string>("SecondaryPhoneNumber");

                    b.HasKey("Id");

                    b.ToTable("Counties");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Employment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("EmploymentStatusExplanation");

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("FacultyId");

                    b.Property<int>("MarkingPeriodId");

                    b.Property<string>("OfficeLocation");

                    b.Property<int>("SchoolId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("FacultyId");

                    b.HasIndex("MarkingPeriodId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Employments");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Enrollment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("EndDate");

                    b.Property<int>("MarkingPeriodId");

                    b.Property<string>("Note");

                    b.Property<int>("SectionId");

                    b.Property<DateTime>("StartDate");

                    b.Property<int>("Status");

                    b.Property<int>("StudentId");

                    b.HasKey("Id");

                    b.HasIndex("MarkingPeriodId");

                    b.HasIndex("SectionId");

                    b.HasIndex("StudentId");

                    b.ToTable("Enrollments");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Date");

                    b.Property<string>("Description");

                    b.Property<int>("SyllabusId");

                    b.Property<string>("Title");

                    b.Property<int>("Type");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("ClassEvents");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("EarnedPoints");

                    b.Property<int>("GradedAssessmentId");

                    b.Property<string>("LateSubmissionAuthorizedBy");

                    b.Property<int>("StudentId");

                    b.Property<DateTime>("SubmissionDate");

                    b.Property<DateTime?>("SubmissionDeadlineDate");

                    b.HasKey("Id");

                    b.HasIndex("GradedAssessmentId");

                    b.HasIndex("StudentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.GradeLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("GradeLevels");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.MarkingPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<int>("SemesterId");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("SemesterId");

                    b.ToTable("MarkingPeriods");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Objective", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("SyllabusId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("Objectives");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Period", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("EndTime");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartTime");

                    b.HasKey("Id");

                    b.ToTable("Periods");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Person", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("PersonId");

                    b.Property<DateTime>("BirthDate");

                    b.Property<string>("FirstName");

                    b.Property<double>("HeightInFeetInches");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<string>("PersonType")
                        .IsRequired();

                    b.Property<string>("SchoolSystemIdentity");

                    b.Property<int>("Sex");

                    b.Property<double>("WeightInPounds");

                    b.HasKey("Id")
                        .HasName("PK_Person");

                    b.ToTable("People");

                    b.HasDiscriminator<string>("PersonType").HasValue("Person");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.PersonAddress", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<int>("AddressId");

                    b.Property<DateTime>("AdditionDate");

                    b.Property<bool>("IsCurrent");

                    b.HasKey("PersonId", "AddressId");

                    b.HasIndex("AddressId");

                    b.ToTable("PersonAddresses");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.PersonContact", b =>
                {
                    b.Property<int>("PersonId");

                    b.Property<int>("ContactId");

                    b.Property<DateTime>("AdditionDate");

                    b.Property<bool>("IsCurrent");

                    b.HasKey("PersonId", "ContactId");

                    b.HasIndex("ContactId");

                    b.ToTable("PersonContacts");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Policy", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<int>("SyllabusId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("SyllabusId");

                    b.ToTable("ClassPolicies");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Relative", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AdditionDate");

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<int>("PersonId");

                    b.Property<string>("PrimaryEmailAddress");

                    b.Property<string>("PrimaryPhoneNumber");

                    b.Property<int>("Relationship");

                    b.Property<string>("SecondaryEmailAddress");

                    b.Property<string>("SecondaryPhoneNumebr");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Relatives");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.School", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<byte[]>("Crest");

                    b.Property<int>("Level");

                    b.Property<string>("Name");

                    b.Property<int>("Ownership");

                    b.Property<string>("PrimaryEmailAddress");

                    b.Property<string>("PrimaryPhoneNumber");

                    b.Property<int>("SchoolDistrictId");

                    b.Property<string>("SecondaryEmailAddress");

                    b.Property<string>("SecondaryPhoneNumebr");

                    b.HasKey("Id");

                    b.HasIndex("SchoolDistrictId");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.SchoolDistrict", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountyId");

                    b.Property<string>("Name");

                    b.Property<string>("OfficeAddress");

                    b.Property<string>("OfficeCity");

                    b.Property<string>("PrimaryEmailAddress");

                    b.Property<string>("PrimaryPhoneNumber");

                    b.Property<string>("SecondaryEmailAddress");

                    b.Property<string>("SecondaryPhoneNumber");

                    b.HasKey("Id");

                    b.HasIndex("CountyId");

                    b.ToTable("SchoolDistricts");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.SchoolGradeLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("GradeLevelId");

                    b.Property<int>("SchoolId");

                    b.HasKey("Id");

                    b.HasIndex("GradeLevelId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolGradeLevels");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.SchoolIdentity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AssignmentDate");

                    b.Property<string>("Identification");

                    b.Property<int>("PersonId");

                    b.Property<int>("SchoolId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.HasIndex("SchoolId");

                    b.ToTable("SchoolIdentities");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Section", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Alias");

                    b.Property<string>("Name");

                    b.Property<int>("PresidentId");

                    b.Property<int>("SchoolGradeLevelId");

                    b.Property<int>("SponsorId");

                    b.HasKey("Id");

                    b.HasIndex("PresidentId")
                        .IsUnique();

                    b.HasIndex("SchoolGradeLevelId");

                    b.HasIndex("SponsorId")
                        .IsUnique();

                    b.ToTable("Sections");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Semester", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcademicYearId");

                    b.Property<DateTime>("EndDate");

                    b.Property<string>("Name");

                    b.Property<DateTime>("StartDate");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.ToTable("Semesters");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Subject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Syllabus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AcademicYearId");

                    b.Property<string>("ClassDescription");

                    b.Property<int>("ClassId");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.HasIndex("AcademicYearId");

                    b.HasIndex("ClassId")
                        .IsUnique();

                    b.ToTable("Syllabi");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.TextBook", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("Isbn");

                    b.Property<string>("Title");

                    b.HasKey("Id");

                    b.ToTable("TextBooks");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Thumbnail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("AdditionDate");

                    b.Property<byte[]>("Image");

                    b.Property<int>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Thumbnails");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Verdict", b =>
                {
                    b.Property<int>("ComplaintId");

                    b.Property<int>("Action");

                    b.Property<DateTime>("ConclusionDate");

                    b.Property<int>("Finding");

                    b.HasKey("ComplaintId");

                    b.ToTable("Verdicts");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.GradedAssessment", b =>
                {
                    b.HasBaseType("ErmTest.Models.Entities.Assessment");

                    b.Property<double>("PercentageCostForLateSubmission");

                    b.Property<double>("PercentageWeightOnFinalGrade");

                    b.Property<int>("PossiblePoints");

                    b.ToTable("GradedAssessment");

                    b.HasDiscriminator().HasValue("GradedAssessment");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Faculty", b =>
                {
                    b.HasBaseType("ErmTest.Models.Entities.Person");


                    b.ToTable("Faculty");

                    b.HasDiscriminator().HasValue("Faculty");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Student", b =>
                {
                    b.HasBaseType("ErmTest.Models.Entities.Person");


                    b.ToTable("Student");

                    b.HasDiscriminator().HasValue("Student");
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Assessment", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Class", "Class")
                        .WithMany("Assessments")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Attendance", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Class", "Class")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.Person", "Person")
                        .WithMany("AttendanceRecords")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Class", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Faculty", "Teacher")
                        .WithMany("Classes")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.Period", "Period")
                        .WithMany("Classes")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.Section", "Section")
                        .WithMany("Classes")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.Subject", "Subject")
                        .WithMany("Classes")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.ClassTextBook", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Class", "Class")
                        .WithMany("ClassTextBooks")
                        .HasForeignKey("ClassId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.TextBook", "TextBook")
                        .WithMany("ClassTextBooks")
                        .HasForeignKey("TextBookId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Complaint", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Person", "Defendant")
                        .WithMany("DefendingComplaints")
                        .HasForeignKey("DefendantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.Person", "Plaintiff")
                        .WithMany("FiledComplaints")
                        .HasForeignKey("PlaintiffId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Employment", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Faculty", "Teacher")
                        .WithMany("Employments")
                        .HasForeignKey("FacultyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.MarkingPeriod", "MarkingPeriod")
                        .WithMany("Employments")
                        .HasForeignKey("MarkingPeriodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.School", "School")
                        .WithMany("Employments")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Enrollment", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.MarkingPeriod", "MarkingPeriod")
                        .WithMany("Enrollments")
                        .HasForeignKey("MarkingPeriodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.Section", "Section")
                        .WithMany("Enrollments")
                        .HasForeignKey("SectionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Event", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Syllabus", "Syllabus")
                        .WithMany("Events")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Grade", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.GradedAssessment", "GradedAssessment")
                        .WithMany("Grades")
                        .HasForeignKey("GradedAssessmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.Student", "Student")
                        .WithMany("Grades")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.MarkingPeriod", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Semester", "Semester")
                        .WithMany("MarkingPeriods")
                        .HasForeignKey("SemesterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Objective", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Syllabus", "Syllabus")
                        .WithMany("Objectives")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.PersonAddress", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Address", "Address")
                        .WithMany("PersonAddresses")
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.Person", "Person")
                        .WithMany("PersonAddresses")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.PersonContact", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Contact", "Contact")
                        .WithMany("PersonContacts")
                        .HasForeignKey("ContactId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.Person", "Person")
                        .WithMany("PersonContacts")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Policy", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Syllabus", "Syllabus")
                        .WithMany("Policies")
                        .HasForeignKey("SyllabusId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Relative", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Person", "Person")
                        .WithMany("Relatives")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.School", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.SchoolDistrict", "District")
                        .WithMany("Schools")
                        .HasForeignKey("SchoolDistrictId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.SchoolDistrict", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.County", "County")
                        .WithMany("SchoolDistricts")
                        .HasForeignKey("CountyId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.SchoolGradeLevel", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.GradeLevel", "GradeLevel")
                        .WithMany("SchoolGradeLevels")
                        .HasForeignKey("GradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.School", "School")
                        .WithMany("SchoolGradeLevels")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.SchoolIdentity", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Person", "Person")
                        .WithMany("SchoolIdentities")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.School", "School")
                        .WithMany("Identities")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Section", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Student", "President")
                        .WithOne("Section")
                        .HasForeignKey("ErmTest.Models.Entities.Section", "PresidentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.SchoolGradeLevel", "GradeLevel")
                        .WithMany("Sections")
                        .HasForeignKey("SchoolGradeLevelId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.Faculty", "Sponsor")
                        .WithOne("SponsoredSection")
                        .HasForeignKey("ErmTest.Models.Entities.Section", "SponsorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Semester", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.AcademicYear", "AcademicYear")
                        .WithMany("Semesters")
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Syllabus", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.AcademicYear", "AcademicYear")
                        .WithMany()
                        .HasForeignKey("AcademicYearId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ErmTest.Models.Entities.Class", "Class")
                        .WithOne("Syllabus")
                        .HasForeignKey("ErmTest.Models.Entities.Syllabus", "ClassId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Thumbnail", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Person", "Person")
                        .WithMany("Thumbnails")
                        .HasForeignKey("PersonId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ErmTest.Models.Entities.Verdict", b =>
                {
                    b.HasOne("ErmTest.Models.Entities.Complaint", "Complaint")
                        .WithOne("Verdict")
                        .HasForeignKey("ErmTest.Models.Entities.Verdict", "ComplaintId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
